grammar Scope

  rule scope_definition
    object ' where ' (compound_condition / condition) {
      def compile
        {
          object_type: elements[0].text_value.gsub('@', ''),
          condition: elements[2].compile
        }
      end
    }
  end

  rule compound_condition
    condition logical_operator (compound_condition / condition) {
      def compile
        {
          left: elements[0].compile,
          operator: elements[1].text_value.gsub(' ', '').to_sym,
          right: elements[2].compile,
        }
      end
    }
  end

  rule condition
    association_condition / comparison_condition
  end

  rule association_condition
    object associator object {
      def compile
        {
          left: object1.text_value,
          operator: associator.text_value.gsub(' ', '').to_sym,
          right: object2.text_value,
        }
      end
    }
  end

  rule comparison_condition
    plain_value comparator plain_value {
      def compile
        {
          left: plain_value1.text_value,
          operator: comparator.text_value.gsub(' ', '').to_sym,
          right: plain_value2.text_value,
        }
      end
    }
  end

  rule plain_value
    object_attribute / string / number / boolean
  end

  rule associator
    ' belongs_to ' / ' does_not_belong_to '
  end

  rule comparator
    ' > ' / ' < ' / ' = ' / ' != '
  end

  rule logical_operator
    ' and ' / ' or '
  end

  rule object_attribute
    object ('.' [a-z_]+)+
  end

  rule object
    specific_object / general_object
  end

  rule general_object
    '@' [a-z_]+
  end

  rule specific_object
    ('u' / 'o') '_' [0-9]+
  end

  rule string
    '"' ('\"' / !'"' .)* '"'
  end

  rule number
    [\d] ('.' [\d]+)?
  end

  rule boolean
    ' true ' / ' false '
  end

  rule space
    [\s]+
  end

end
